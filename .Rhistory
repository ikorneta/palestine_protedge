#' This R script will process all R mardown files (those with in_ext file extention,
#' .rmd by default) in the current working directory. Files with a status of
#' 'processed' will be converted to markdown (with out_ext file extention, '.markdown'
#' by default). It will change the published parameter to 'true' and change the
#' status parameter to 'publish'.
#'
#' @param dir the directory to process R Markdown files.
#' @param images.dir the base directory where images will be generated.
#' @param images.url
#' @param out_ext the file extention to use for processed files.
#' @param in_ext the file extention of input files to process.
#' @param recursive should rmd files in subdirectories be processed.
#' @return nothing.
#' @author Jason Bryer <jason@bryer.org>
convertRMarkdown <- function(dir=getwd(), images.dir=dir, images.url='/images/',
out_ext='.markdown', in_ext='.rmd', recursive=FALSE) {
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
files <- list.files(path=dir, pattern=in_ext, ignore.case=TRUE, recursive=recursive)
for(f in files) {
message(paste("Processing ", f, sep=''))
content <- readLines(f)
frontMatter <- which(substr(content, 1, 3) == '---')
if(length(frontMatter) >= 2 & 1 %in% frontMatter) {
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
outFile <- paste(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext, sep='')
render_markdown(strict=TRUE)
opts_knit$set(out.format='markdown')
opts_knit$set(base.dir=images.dir)
opts_knit$set(base.url=images.url)
try(knit(text=content, output=outFile), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
invisible()
}
convertRMarkdown()
setwd("C:/Users/Iga/Desktop/protedge")
convertRMarkdown()
convertRMarkdown()
convertRMarkdown()
library(ggplot2)
library(gridExtra)
library(plyr)
library(dplyr)
library(lubridate)
library(hexbin)
final <- read.csv("./final.txt", sep="\t")
final$Date<-as.Date(final$Date, format="%d-%b")
final$Comb_sex <- as.factor(final$Comb_sex)
final$Comb_place <- as.factor(final$Comb_place)
agegroupmag <- c("Adults", "Children", "Elderly", "Unknown", "Young adults")
final$Age_group <- as.factor(agegroupmag[final$Age_group])
final$Age_group <- factor(final$Age_group, levels=c("Unknown", "Children", "Young adults", "Adults", "Elderly"))
final$temp <- ifelse(final$Comb_name_summary==0, "Unidentified", "Identified")
plot1 <- ggplot(final, aes(x=temp, fill=temp))
plot1 <- plot1 + geom_bar() + theme_bw() + xlab("Identification") + ylab("Count")
plot1 <- plot1 + scale_fill_manual(values=c("dark grey", "light grey")) +theme(legend.position="none")
plot2 <- ggplot(final[final$Ethnic_group=="Palestinian",], aes(x=Comb_age))
plot2 <- plot2 + geom_bar(fill="dark red", color="white") + theme_bw() + xlab("Age") + ylab("Count")
plot3 <- ggplot(final[final$Ethnic_group=="Palestinian" & !is.na(final$Comb_sex),], aes(x=Comb_sex))
plot3 <- plot3 + geom_bar(fill="black") + theme_bw() + xlab("Sex") + ylab("Count")
temp <- adply(tapply(final$Comb_place, final$Comb_place, count), c(1))
temp <- transform(temp, x=reorder(x, -freq))
plot4 <- ggplot(temp[temp$freq>5,], aes(x=x, y=freq))
plot4 <- plot4 + geom_bar(stat="identity", fill="dark red")
plot4 <- plot4 + theme_bw()+ ylab("Place") + xlab("Count") + coord_flip() +theme(axis.text.y=element_text(size=6))
grid.arrange(plot1, plot2, plot3, plot4)
temp.side.by.side <- adply(tapply(final$Age_group[final$Ethnic_group!="Israeli"], final$Age_group[final$Ethnic_group!="Israeli"], count), c(1))
temp.side.by.side <- temp.side.by.side[temp.side.by.side$x!="Unknown",c(2:3)]
temp.side.by.side$freq <- temp.side.by.side$freq*100/sum(temp.side.by.side$freq)
temp.side.by.side$Gaza <- c(43.5, 20.9, 29.6, 6.0)
colnames(temp.side.by.side) <- c("Group", "Victims", "Gaza")
temp.side.by.side$Group <- factor(temp.side.by.side$Group, levels=c("Children", "Young adults", "Adults", "Elderly"))
plot21 <- ggplot(temp.side.by.side, aes(fill=Group))
plot21 <- plot21 + geom_bar(aes(x="Gaza whole", y=temp.side.by.side$Gaza), stat="identity")
plot21 <- plot21 + geom_bar(aes(x="Victims", y=temp.side.by.side$Victims), stat="identity")
plot21 <- plot21 + theme_bw() + scale_fill_brewer(name="Age group", palette="RdGy") +xlab("") +ylab("Percent") + coord_flip()+theme(legend.position="bottom", legend.text=element_text(size=6))
plot21
convertRMarkdown()
